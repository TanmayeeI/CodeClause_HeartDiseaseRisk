# -*- coding: utf-8 -*-
"""HeartDisease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AzIcsoJoyNEXTSjdxAGei3-wgwPmI0lY
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import joblib

# Load dataset
df = pd.read_csv('heart.csv')

# Features and target
X = df.drop('target', axis=1)
y = df['target']

# Train-test split (optional, not used here)
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestClassifier()
model.fit(X, y)

# Save model
joblib.dump(model, 'heart_model.pkl')

print("Model trained and saved as heart_model.pkl")

from flask import Flask, render_template, request, jsonify
import numpy as np
import joblib
import sqlite3
from datetime import datetime

app = Flask(__name__)

# Load the trained model
model = joblib.load(open('heart_model.pkl', 'rb'))

# Initialize the SQLite database
def init_db():
    conn = sqlite3.connect('heartdisease.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS predictions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            age INTEGER,
            sex INTEGER,
            cp INTEGER,
            trestbps INTEGER,
            chol INTEGER,
            fbs INTEGER,
            restecg INTEGER,
            thalach INTEGER,
            exang INTEGER,
            oldpeak REAL,
            slope INTEGER,
            ca INTEGER,
            thal INTEGER,
            result TEXT,
            timestamp TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    try:
        data = request.get_json(force=True)  # Get JSON data from frontend

        # Extract features from JSON
        age = int(data['age'])
        sex = int(data['sex'])
        cp = int(data['cp'])
        trestbps = int(data['trestbps'])
        chol = int(data['chol'])
        fbs = int(data['fbs'])
        restecg = int(data['restecg'])
        thalach = int(data['thalach'])
        exang = int(data['exang'])
        oldpeak = float(data['oldpeak'])
        slope = int(data['slope'])
        ca = int(data['ca'])
        thal = int(data['thal'])

        # Prepare input for prediction
        input_data = np.array([[age, sex, cp, trestbps, chol, fbs, restecg,
                                thalach, exang, oldpeak, slope, ca, thal]])
        prediction = model.predict(input_data)[0]
        result = "High" if prediction == 1 else "Low"

        # Save prediction to the database
        conn = sqlite3.connect('heartdisease.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO predictions (age, sex, cp, trestbps, chol, fbs, restecg,
                                     thalach, exang, oldpeak, slope, ca, thal,
                                     result, timestamp)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang,
              oldpeak, slope, ca, thal, result, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        conn.commit()
        conn.close()

        return jsonify({'risk': result})

    except Exception as e:
        return jsonify({'error': str(e)})

if __name__ == '__main__':
    app.run(debug=True)